class Solution:
    def reverseBits(self, n: int) -> int:
        '''
        题目: 颠倒给定的 32 位无符号整数的二进制位
             如:
                输入:00000010100101000001111010011100
                输出:00111001011110000010100101000000
        思路: 
            1. 将res左移
            2. 获取二进制末尾数字
            3. 将res拼接末尾数字
            4. n右移
        '''
        # 1. 分治法
        n = (n >> 16) | (n << 16); # 将前16位和后16位调换位置
        n = ((n & 0xff00ff00) >> 8) | ((n & 0x00ff00ff) << 8);#
        n = ((n & 0xf0f0f0f0) >> 4) | ((n & 0x0f0f0f0f) << 4);
        n = ((n & 0xcccccccc) >> 2) | ((n & 0x33333333) << 2);
        n = ((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1);



        # 2. 循环法
        # res = 0
        # for i in range(32):
        #     res <<= 1
        #     res |= n & 1
        #     n >>= 1
        # return res


s = Solution()
n = 0b0000001010010100 0001111010011100
x = 0b0001111010011100 0000001010010100
x  &0b1111111100000000 0000111100001111 
x  
print('res:', s.reverseBits(n))
